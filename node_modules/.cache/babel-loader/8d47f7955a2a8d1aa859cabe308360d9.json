{"ast":null,"code":"import _classCallCheck from \"C:\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\myapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\myapp\\\\src\\\\MainTasks\\\\Posts\\\\Posts.js\";\nimport React, { Component } from 'react';\nimport './posts.css';\nimport DAL from \"../../DALUtils\";\nimport { connect } from 'react-redux';\nimport Post from \"./Post\";\n\nvar Posts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Posts, _Component);\n\n  function Posts(props) {\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Posts).call(this, props));\n\n    _this.pushToURL = function () {\n      _this.props.history.push(\"/tasks/\".concat(_this.state.clickedUserId, \"/addPost\"));\n    };\n\n    _this.state = {\n      posts: [],\n      clickedUserId: \"\",\n      history: _this.props.history\n    };\n    return _this;\n  }\n\n  _createClass(Posts, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var clicked = this.state.clickedUserId;\n      var postsMap = this.state.posts.filter(function (x) {\n        return x.userId == clicked;\n      }).map(function (item, index) {\n        return React.createElement(\"div\", {\n          className: \"postMapping\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, React.createElement(Post, {\n          title: item.title,\n          body: item.body,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        })));\n      });\n      return React.createElement(\"div\", {\n        id: \"Posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"headlineDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Posts - User \", clicked), React.createElement(\"input\", {\n        type: \"button\",\n        value: \"Add\",\n        className: \"add-btn\",\n        onClick: this.pushToURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), postsMap);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, nextState) {\n      if (nextProps != nextState) {\n        return {\n          clickedUserId: nextProps.clickedUserId,\n          posts: nextProps.data.posts,\n          urlPath: nextProps.history.location.pathname\n        };\n      } else {\n        return {\n          clickedUserId: nextState.clickedUserId,\n          posts: nextState.posts,\n          urlPath: nextState.history.location.pathname\n        };\n      }\n    }\n  }]);\n\n  return Posts;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    data: state\n  };\n};\n\nexport default connect(mapStateToProps)(Posts);","map":{"version":3,"sources":["C:\\myapp\\src\\MainTasks\\Posts\\Posts.js"],"names":["React","Component","DAL","connect","Post","Posts","props","pushToURL","history","push","state","clickedUserId","posts","clicked","postsMap","filter","x","userId","map","item","index","title","body","nextProps","nextState","data","urlPath","location","pathname","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAGMC,K;;;;;AACF,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN;;AADc,UAclBC,SAdkB,GAcR,YAAI;AACV,YAAKD,KAAL,CAAWE,OAAX,CAAmBC,IAAnB,kBAAkC,MAAKC,KAAL,CAAWC,aAA7C;AACH,KAhBiB;;AAEd,UAAKD,KAAL,GAAW;AAACE,MAAAA,KAAK,EAAC,EAAP;AAAUD,MAAAA,aAAa,EAAC,EAAxB;AAA2BH,MAAAA,OAAO,EAAC,MAAKF,KAAL,CAAWE;AAA9C,KAAX;AAFc;AAGjB;;;;wCASkB,CAAE;;;6BAMZ;AACL,UAAIK,OAAO,GAAG,KAAKH,KAAL,CAAWC,aAAzB;AACA,UAAIG,QAAQ,GAAE,KAAKJ,KAAL,CAAWE,KAAX,CAAiBG,MAAjB,CAAwB,UAAAC,CAAC;AAAA,eAAEA,CAAC,CAACC,MAAF,IAAWJ,OAAb;AAAA,OAAzB,EAA+CK,GAA/C,CAAmD,UAACC,IAAD,EAAMC,KAAN,EAAc;AAC3E,eAAM;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAED,IAAI,CAACE,KAAlB;AAAyB,UAAA,IAAI,EAAEF,IAAI,CAACG,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADE,CAAN;AAKH,OANa,CAAd;AAQA,aACI;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiBT,OAAjB,CADJ,EAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,KAA3B;AAAiC,QAAA,SAAS,EAAC,SAA3C;AAAqD,QAAA,OAAO,EAAE,KAAKN,SAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,EAKKO,QALL,CADJ;AASH;;;6CAhC+BS,S,EAAUC,S,EAAU;AAChD,UAAGD,SAAS,IAAEC,SAAd,EAAwB;AACpB,eAAM;AAACb,UAAAA,aAAa,EAAEY,SAAS,CAACZ,aAA1B;AAAyCC,UAAAA,KAAK,EAACW,SAAS,CAACE,IAAV,CAAeb,KAA9D;AAAoEc,UAAAA,OAAO,EAACH,SAAS,CAACf,OAAV,CAAkBmB,QAAlB,CAA2BC;AAAvG,SAAN;AACH,OAFD,MAEK;AAAE,eAAM;AAACjB,UAAAA,aAAa,EAAEa,SAAS,CAACb,aAA1B;AAAyCC,UAAAA,KAAK,EAACY,SAAS,CAACZ,KAAzD;AAA+Dc,UAAAA,OAAO,EAACF,SAAS,CAAChB,OAAV,CAAkBmB,QAAlB,CAA2BC;AAAlG,SAAN;AAAkH;AAE5H;;;;EAXe3B,S;;AA4CpB,IAAM4B,eAAe,GAAG,SAAlBA,eAAkB,CAACnB,KAAD,EAAU;AAC9B,SAAO;AACHe,IAAAA,IAAI,EAAEf;AADH,GAAP;AAGH,CAJD;;AAOA,eAAeP,OAAO,CAAC0B,eAAD,CAAP,CAAyBxB,KAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './posts.css';\r\nimport DAL from \"../../DALUtils\";\r\nimport {connect} from 'react-redux';\r\nimport Post from \"./Post\";\r\n\r\n\r\nclass Posts extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={posts:[],clickedUserId:\"\",history:this.props.history};\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps,nextState){\r\n        if(nextProps!=nextState){\r\n            return{clickedUserId: nextProps.clickedUserId ,posts:nextProps.data.posts,urlPath:nextProps.history.location.pathname}\r\n        }else{ return{clickedUserId: nextState.clickedUserId ,posts:nextState.posts,urlPath:nextState.history.location.pathname}}\r\n\r\n    }\r\n\r\n    componentDidMount(){}\r\n\r\n    pushToURL=()=>{\r\n        this.props.history.push(`/tasks/${this.state.clickedUserId}/addPost`);\r\n    };\r\n\r\n    render() {\r\n        var clicked = this.state.clickedUserId;\r\n        var postsMap= this.state.posts.filter(x=>x.userId ==clicked).map((item,index)=>{\r\n            return<div className='postMapping' key={index}>\r\n                <div>\r\n                    <Post title={item.title} body={item.body}/>\r\n                </div>\r\n            </div>\r\n        });\r\n\r\n        return (\r\n            <div id=\"Posts\">\r\n                <div className='headlineDiv'>\r\n                    <p>Posts - User {clicked}</p>\r\n                    <input type='button' value='Add' className=\"add-btn\" onClick={this.pushToURL}/>\r\n                </div>\r\n                {postsMap}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state)=> {\r\n    return {\r\n        data: state\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Posts);"]},"metadata":{},"sourceType":"module"}